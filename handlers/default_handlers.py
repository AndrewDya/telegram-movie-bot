from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database.database import get_favorite_movies
from handlers.actors_api import send_actors_info
from handlers.movie_api import send_movie_info, get_favorite_movie_details
from handlers.series_api import send_series_info
from config import API_KEY, language
from utils.utils import send_http_request


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons_row1 = [
        InlineKeyboardButton("–ü–æ–º–æ—â—å ü§î", callback_data="help_command"),
        InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã üé¨", callback_data="popular_command"),
    ]
    buttons_row2 = [
        InlineKeyboardButton("–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ üëç", callback_data="top_rated_command"),
        InlineKeyboardButton("–û–∂–∏–¥–∞–µ–º—ã–µ üöÄ", callback_data="upcoming_command"),
    ]
    buttons_row3 = [
        InlineKeyboardButton("–ü–æ–∏—Å–∫ üîç", callback_data="search_command"),
        InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ üìö", callback_data="favorites_command"),
    ]

    buttons_row4 = [
        InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç—ë—Ä—ã üåü", callback_data="actors_popular_command"),
        InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã üì∫", callback_data="series_popular_command"),
    ]

    keyboard = InlineKeyboardMarkup([buttons_row1, buttons_row2, buttons_row3,
                                     buttons_row4])

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
                                   reply_markup=keyboard)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    response += "–ü–æ–º–æ—â—å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n"
    response += "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    response += "–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n"
    response += "–û–∂–∏–¥–∞–µ–º—ã–µ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    response += "–ü–æ–∏—Å–∫ - –ü–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤–≤–µ–¥–∏—Ç–µ " \
                "–∑–∞–ø—Ä–æ—Å –∏ –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n"
    response += "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
    response += "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç—ë—Ä—ã - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç—ë—Ä–æ–≤\n"
    response += "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤\n"

    await context.bot.send_message(chat_id=update.effective_chat.id, text=response)
    await start_command(update, context)


async def create_movie_count_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    category_names = {
        "top": "—Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–∏–ª—å–º–æ–≤",
        "popular": "–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤",
        "upcoming": "–æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤",
        "actors_popular": "–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ç—ë—Ä–æ–≤",
        "series_popular": "–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤",
    }

    movie_counts = [1, 3, 5, 10]

    buttons = [
        InlineKeyboardButton(str(count), callback_data=f"{category}_{count}")
        for count in movie_counts
    ]

    keyboard = InlineKeyboardMarkup([buttons])
    category_name = category_names.get(category, category)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {category_name}, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:",
        reply_markup=keyboard
    )


async def top_rated_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "top")
    else:
        url = f"https://api.themoviedb.org/3/movie/top_rated?api_key={API_KEY}&page=1&language={language}"
        await get_movies_by_url(update, context, url, selected_count)


async def popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "popular")
    else:
        url = f"https://api.themoviedb.org/3/movie/popular?api_key={API_KEY}&page=1&language={language}"
        await get_movies_by_url(update, context, url, selected_count)


async def upcoming_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "upcoming")
    else:
        url = f"https://api.themoviedb.org/3/movie/upcoming?api_key={API_KEY}&page=1&language={language}"
        await get_movies_by_url(update, context, url, selected_count)


async def actors_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "actors_popular")
    else:
        url = f"https://api.themoviedb.org/3/person/popular?api_key={API_KEY}&page=1&language={language}"
        await get_actors_by_url(update, context, url, selected_count)


async def series_popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "series_popular")
    else:
        url = f"https://api.themoviedb.org/3/tv/popular?api_key={API_KEY}&language={language}"
        await get_series_by_url(update, context, url, selected_count)


async def favorites_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    favorite_movie_ids = get_favorite_movies(user_id)

    if not favorite_movie_ids:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç.")
        return

    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=f"–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ {len(favorite_movie_ids)}:")

    for movie_id in favorite_movie_ids:
        await get_favorite_movie_details(update, context, movie_id)


async def get_movies_by_url(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, selected_count: int,):
    data = await send_http_request(url)
    if data and "results" in data:
        movies = data["results"][:selected_count]
        await send_movie_info(update, context, movies)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö")
    await start_command(update, context)


async def get_actors_by_url(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, selected_count: int):
    data = await send_http_request(url)
    if data and "results" in data:
        actors = data["results"][:selected_count]
        await send_actors_info(update, context, actors)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç—ë—Ä–∞—Ö"
        )
    await start_command(update, context)


async def get_series_by_url(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, selected_count: int):
    data = await send_http_request(url)
    if data and "results" in data:
        series_list = data["results"][:selected_count]
        await send_series_info(update, context, series_list)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–∏–∞–ª–∞—Ö"
        )
    await start_command(update, context)

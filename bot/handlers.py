from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackContext
from bot.movie_api import send_movie_info, get_favorite_movie_details, \
    get_data_from_id, get_title_from_id
from bot.utils import API_KEY, language, send_http_request
from database.database import search_movies
from database.favorites import get_favorite_movies, add_to_favorites, \
    remove_from_favorites


async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    button_data = query.data

    if button_data == "help_command":
        await help_command(update, context)
    elif button_data == "popular_command":
        await popular_command(update, context, selected_count=None)
    elif button_data.startswith("popular_"):
        selected_count = int(button_data.split("_")[1])
        await popular_command(update, context, selected_count)
    elif button_data == "top_rated_command":
        await top_rated_command(update, context, selected_count=None)
    elif button_data.startswith("top_"):
        selected_count = int(button_data.split("_")[1])
        await top_rated_command(update, context, selected_count)
    elif button_data == "upcoming_command":
        await upcoming_command(update, context, selected_count=None)
    elif button_data.startswith("upcoming_"):
        selected_count = int(button_data.split("_")[1])
        await upcoming_command(update, context, selected_count)
    elif button_data == "search_command":
        await search_command(update, context)
    elif button_data == "favorites_command":
        await favorites_command(update, context)
    elif button_data.startswith("add_to_favorites_"):
        movie_id = int(button_data.split("_")[3])
        add_to_favorites(update.effective_user.id, movie_id)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"–§–∏–ª—å–º {await get_title_from_id(movie_id)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    elif button_data.startswith("remove_from_favorites_"):
        movie_id = int(button_data.split("_")[3])
        remove_from_favorites(update.effective_user.id, movie_id)
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text=f"–§–∏–ª—å–º {await get_title_from_id(movie_id)} —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")
        await start_command(update, context)
    elif button_data.startswith("view_movie_"):
        movie_id = int(button_data.split("_")[2])
        movie_data = await get_data_from_id(movie_id)
        await send_movie_info(update, context, movie_data)
        await start_command(update, context)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
    buttons_row1 = [
        InlineKeyboardButton("–ü–æ–º–æ—â—å ü§î", callback_data="help_command"),
        InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã üé¨", callback_data="popular_command"),
    ]
    buttons_row2 = [
        InlineKeyboardButton("–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ üëç", callback_data="top_rated_command"),
        InlineKeyboardButton("–û–∂–∏–¥–∞–µ–º—ã–µ üöÄ", callback_data="upcoming_command"),
    ]
    buttons_row3 = [
        InlineKeyboardButton("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç", callback_data="search_command"),
        InlineKeyboardButton("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ üìö", callback_data="favorites_command"),
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup([buttons_row1, buttons_row2, buttons_row3])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
                                   reply_markup=keyboard)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    response += "–ü–æ–º–æ—â—å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n"
    response += "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    response += "–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n"
    response += "–û–∂–∏–¥–∞–µ–º—ã–µ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    response += "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ - –ü–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ " \
                "–∏ –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n"
    response += "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(chat_id=update.effective_chat.id, text=response)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ start_command –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    await start_command(update, context)


async def create_movie_count_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    # –í–∞—Ä–∏–∞–Ω—Ç—ã —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–Ω–æ–ø–∫–∞—Ö
    movie_counts = [1, 3, 5, 10]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤
    buttons = [
        InlineKeyboardButton(str(count), callback_data=f"{category}_{count}")
        for count in movie_counts
    ]
    keyboard = InlineKeyboardMarkup([buttons])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≤—ã–±–æ—Ä–µ —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤
    if category == "top":
        category = "—Ç–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞"
    elif category == "popular":
        category = "–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö"
    elif category == "upcoming":
        category = "–æ–∂–∏–¥–∞–µ–º—ã—Ö"
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {category} —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:",
        reply_markup=keyboard
    )


async def get_movies_by_url(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, selected_count: int,):
    data = await send_http_request(url)
    if data and "results" in data:
        movies = data["results"][:selected_count]
        await send_movie_info(update, context, movies)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö")
    await start_command(update, context)


async def top_rated_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "top")
    else:
        url = f"https://api.themoviedb.org/3/movie/top_rated?api_key={API_KEY}&page=1&language={language}"
        await get_movies_by_url(update, context, url, selected_count)


async def popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "popular")
    else:
        url = f"https://api.themoviedb.org/3/movie/popular?api_key={API_KEY}&page=1&language={language}"
        await get_movies_by_url(update, context, url, selected_count)


async def upcoming_command(update: Update, context: ContextTypes.DEFAULT_TYPE, selected_count=None):
    if selected_count is None:
        await create_movie_count_buttons(update, context, "upcoming")
    else:
        url = f"https://api.themoviedb.org/3/movie/upcoming?api_key={API_KEY}&page=1&language={language}"
        await get_movies_by_url(update, context, url, selected_count)


async def search_command(update: Update, context: CallbackContext):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")


async def search_message(update: Update, context: CallbackContext):
    user_input = update.message.text
    movie_ids = search_movies(user_input)  # –°–ø–∏—Å–æ–∫ id —Ñ–∏–ª—å–º–æ–≤
    movies = []
    for movie_id in movie_ids:
        url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={API_KEY}&language={language}"
        data = await send_http_request(url)
        if data:
            movies.append(data)

    if movies:
        await send_movie_info(update, context, movies)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await start_command(update, context)


async def favorites_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    favorite_movie_ids = get_favorite_movies(user_id)

    if not favorite_movie_ids:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç.")
        return

    # –í—ã–≤–æ–¥–∏–º ID —Ñ–∏–ª—å–º–æ–≤
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ {len(favorite_movie_ids)}:")

    for movie_id in favorite_movie_ids:
        await get_favorite_movie_details(update, context, movie_id)

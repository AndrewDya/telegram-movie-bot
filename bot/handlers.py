import io
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from bot.movie_api import view_movie_info
from bot.utils import API_KEY, language, send_http_request, load_photo_content


async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    button_data = query.data

    if button_data == "help_command":
        await help_command(update, context)
    elif button_data == "popular_command":
        await popular_command(update, context)
    elif button_data == "top_rated_command":
        await top_rated_command(update, context)
    elif button_data == "upcoming_command":
        await upcoming_command(update, context)
    elif button_data == "search_command":
        await search_command(update, context)
    elif button_data == "history_command":
        await history_command(update, context)
    elif button_data.startswith("popular_"):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∏—Å–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        await on_popular_count_selected(update, context)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
    buttons_row1 = [
        InlineKeyboardButton("–ü–æ–º–æ—â—å ü§î", callback_data="help_command"),
        InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã üé¨", callback_data="popular_command"),
    ]
    buttons_row2 = [
        InlineKeyboardButton("–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ üëç", callback_data="top_rated_command"),
        InlineKeyboardButton("–û–∂–∏–¥–∞–µ–º—ã–µ üöÄ", callback_data="upcoming_command"),
    ]
    buttons_row3 = [
        InlineKeyboardButton("–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ üîç", callback_data="search_command"),
        InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìö", callback_data="history_command"),
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup([buttons_row1, buttons_row2, buttons_row3])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
                                   reply_markup=keyboard)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    response += "–ü–æ–º–æ—â—å - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n"
    response += "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    response += "–¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥–∞ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n"
    response += "–û–∂–∏–¥–∞–µ–º—ã–µ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    response += "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ - –ü–æ—Å–ª–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ " \
                "–∏ –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n"
    response += "–ò—Å—Ç–æ—Ä–∏—è - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await context.bot.send_message(chat_id=update.effective_chat.id, text=response)

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ start_command –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    await start_command(update, context)


async def popular_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—Ä–∏–∞–Ω—Ç—ã —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–Ω–æ–ø–∫–∞—Ö
    movie_counts = [1, 3, 5, 10]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤
    buttons = [
        InlineKeyboardButton(str(count), callback_data=f"popular_{count}")
        for count in movie_counts
    ]
    keyboard = InlineKeyboardMarkup([buttons])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≤—ã–±–æ—Ä–µ —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:",
        reply_markup=keyboard
    )


async def on_popular_count_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ CallbackQuery
    selected_count = int(update.callback_query.data.split("_")[1])

    url = f"https://api.themoviedb.org/3/movie/popular?api_key={API_KEY}&page=1&language={language}"

    data = await send_http_request(url)
    if data and "results" in data:
        movies = data["results"][:selected_count]

        for movie in movies:
            poster_url, movie_info, keyboard = await view_movie_info(movie)
            photo_data = await load_photo_content(poster_url)
            if photo_data:
                photo_stream = io.BytesIO(photo_data)
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id, photo=photo_stream,
                    caption=movie_info, reply_markup=keyboard)
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö")


async def top_rated_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.themoviedb.org/3/movie/top_rated?api_key={API_KEY}&page=1&language={language}"

    data = await send_http_request(url)
    if data and "results" in data:
        movies = data["results"][:5]  # TODO: –ò–∑–º–µ–Ω–∏—Ç—å 5, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        for movie in movies:
            poster_url, movie_info, keyboard = await view_movie_info(movie)
            file_content = await load_photo_content(poster_url)
            if file_content:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id, photo=file_content, caption=movie_info, reply_markup=keyboard)
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º")


async def upcoming_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"https://api.themoviedb.org/3/movie/upcoming?api_key={API_KEY}&page=1&language={language}"

    data = await send_http_request(url)
    if data and "results" in data:
        movies = data["results"][:5]  # TODO: –ò–∑–º–µ–Ω–∏—Ç—å 5, –¥–æ–±–∞–≤–∏—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        for movie in movies:
            poster_url, movie_info, keyboard = await view_movie_info(movie)
            file_content = await load_photo_content(poster_url)
            if file_content:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id, photo=file_content, caption=movie_info, reply_markup=keyboard)
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–∞—Ö")


async def search_command():
    pass


async def history_command():
    pass
